#+TITLE:     TODO.org:scala-koans
#+AUTHOR:    Luke Amdor
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t

* Things to do
  :PROPERTIES:
  :ID:       23E57057-6ADF-4E95-A9C3-16E6AF6217F8
  :END:
*** DONE __ is a nicer pending
    CLOSED: [2010-09-06 Mon 11:35]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2010-09-06 Mon 11:35]
    :END:
*** DONE "trace off" (to stop logging backtraces) by default
    CLOSED: [2010-09-06 Mon 18:06]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2010-09-06 Mon 18:06]
    :END:
*** DONE meditate equivalent to pending
    CLOSED: [2010-09-12 Sun 22:36]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2010-09-12 Sun 22:36]
    :END:
***** force the student to look at the code
*** DONE refine topic list
    CLOSED: [2010-09-12 Sun 22:36]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2010-09-12 Sun 22:36]
    :END:
*** TODO work through topics
*** TODO full dist with libs
*** TODO show file and line number as part of meditation number
*** TODO sbt commands for next
*** CANCELED simple package object for koan import
    CLOSED: [2010-09-06 Mon 17:54]
*** TODO README w/ instructions
* Topics
*** DONE Test asserts - Message, bool, etc.
    CLOSED: [2010-09-07 Tue 20:26]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2010-09-07 Tue 20:26]
    :END:
*** DONE val and var
    CLOSED: [2010-09-07 Tue 20:26]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2010-09-07 Tue 20:26]
    :END:
***** val
***** var
***** type inference
*** DONE literals
    CLOSED: [2010-09-07 Tue 21:26]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2010-09-07 Tue 21:26]
    :END:
***** integers
***** floats
***** symbols
***** strings
*** DONE Tuples - syntax
    CLOSED: [2010-09-07 Tue 21:26]
    :LOGBOOK:
    - State "DONE"       from "TODO"       [2010-09-07 Tue 21:26]
    :END:
***** tuple assignment
***** Pair = Tuple2
*** TODO methods
***** parameter type declarations
***** returns
***** return type
***** return type necessary if recursive
***** nested method
***** { } not always necessary
*** TODO classes
***** creating a class
***** constructor
***** passing values up to super's constructor
***** defining methods
***** lazy val
***** memoization
***** method override
***** visibility
*** imports / package
***** package of this test is __
***** package namespace like with "package {...}"
***** imports are relative
*** singleton objects
*** collections
***** array
******* corresponds to java array
***** list
******* immutable
******* Nil
***** map
******* Map of pairs
*** functions
***** Functions returning functions
***** Functions taking functions
***** call by name
***** functions can be defined inside functions (anywhere)
***** return type is sometimes not needed
***** types required on parameters
***** dot not always required
***** parens not always required
***** Method apply
*** operators
***** can't be reserved words
*** map, reduce, filter
*** if expressions
*** Pattern Matching
***** match on value
***** match on type
***** match on tuple
***** wildcard match
***** match on unapply
***** match with guards
***** binding on nested variables - case p @ Person(first, last)
*** traits / mixins
***** defining
***** mixxing in
***** constructor order
***** method order
*** currying / partial application / multiple argument lists
***** partialing applying a multiple argument func
***** partial an instance's method
*** case classes
***** match on case class
*** exceptions and try/catch
***** Nothing values
*** option types
*** for comprehensions
*** regular expressions
***** match on regular expression

*** other looping contstructs
***** while
***** do while
***** for (i <- 1 to 20)
*** abstract classes
***** parameterized types
*** enumerations
*** package objects
*** actors
*** xml
